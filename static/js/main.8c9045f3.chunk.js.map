{"version":3,"sources":["components/testContainer/TestContainer.jsx","components/questionCard/QuestionCard.jsx","utilities/api/Api.js","utilities/api/Uri.js","components/testRunnerCard/TestRunnerCard.jsx","components/resultCardContainer/ResultCardContainer.jsx","components/linkContainer/LinkContainer.jsx","components/factor/Factor.jsx","components/resultCard/ResultCard.jsx","components/loader/Loader.jsx","containers/test/Test.jsx","containers/testRunner/TestRunner.jsx","containers/result/Result.jsx","containers/notFound/NotFound.jsx","containers/serverError/ServerError.jsx","Navigator.jsx","App.js","serviceWorker.js","index.js"],"names":["answers","useStyles","makeStyles","cardBody","margin","header","padding","button","width","none","display","text","textTransform","buttonsRoot","marginTop","justifyContent","mainText","hyphens","QuestionCard","number","question","answer","progress","onAnswer","onBack","classes","className","Card","elevation","CardContent","IconButton","onClick","size","color","disabled","aria-label","Typography","variant","component","CardActions","map","item","index","Button","key","answerId","id","LinearProgress","value","api","axios","create","baseURL","Api","url","config","get","data","put","post","delete","TestContainer","props","state","test","counter","startUTC","getNow","lastTime","hasMore","handleAnswerClick","bind","backClickHandler","this","loadTest","resp","status","Array","length","setState","history","push","questionId","duration","questions","createResult","then","toUTCString","info","getInfo","timezone","Date","getTimezoneOffset","pageon","window","location","pathname","referrer","document","browserName","navigator","appName","browserEngine","product","browserVersion1a","appVersion","browserVersion1b","userAgent","browserLanguage","language","browserOnline","onLine","browserPlatform","platform","javaEnabled","dataCookiesEnabled","cookieEnabled","render","React","Component","root","maxWidth","marginBottom","TestRunnerCard","Paper","ResultCardContainer","result","loadResult","response","link","LinkContainer","TextField","label","href","clipboard","writeText","slider","createMarks","expectedValue","concat","standardDeviation","Factor","factor","configuration","name","align","minValueName","maxValueName","Slider","aria-labelledby","step","marks","min","minValue","max","maxValue","resultsTitle","ResultCard","type","active","Test","TestRunner","Result","useParams","NotFound","to","ServerError","Navigator","path","exact","App","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c9045f3.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { Api, GET_TEST, POST_ANSWER } from '../../utilities';\r\nimport QuestionCard from '../questionCard/QuestionCard';\r\nimport { Loader } from '..';\r\n\r\nvar answers;\r\n\r\nclass TestContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { test: null, counter: 0, startUTC: this.getNow(), lastTime: this.getNow(), hasMore: true };\r\n        this.handleAnswerClick = this.handleAnswerClick.bind(this);\r\n        this.backClickHandler = this.backClickHandler.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadTest();\r\n    }\r\n\r\n    async loadTest() {\r\n        try {\r\n            const resp = await Api.get(GET_TEST);\r\n\r\n            if (resp.status === 200) {\r\n                answers = new Array(resp.data.length);\r\n                this.setState({ test: resp.data });\r\n            }\r\n        } catch {\r\n            const { history } = this.props;\r\n            history.push('/error');\r\n        }\r\n    }\r\n\r\n    handleAnswerClick(questionId, answerId) {\r\n        const { test, counter, lastTime } = this.state;\r\n        const { history } = this.props;\r\n        const duration = this.getNow() - lastTime;\r\n\r\n        answers[counter] = { questionId, answerId, duration };\r\n\r\n        if (counter === test.questions.length - 1) {\r\n            this.setState({ hasMore: false });\r\n            Api.post(POST_ANSWER, this.createResult()).then((resp) => {\r\n                if(resp.status === 200){\r\n                history.push( `/result/${resp.data}`)\r\n            }\r\n            else{\r\n                history.push( `/not_found`)\r\n            }\r\n        });\r\n        } else {\r\n            this.setState({ counter: counter + 1, lastTime: this.getNow() });\r\n        }\r\n    }\r\n\r\n    createResult() {\r\n        const { startUTC } = this.state;\r\n        const duration = this.getNow() - startUTC;\r\n\r\n        return { answers, startUTC: startUTC.toUTCString(), duration, info: this.getInfo() };\r\n    }\r\n\r\n    getInfo() {\r\n        return {\r\n            timezone: new Date().getTimezoneOffset() / 60,\r\n            pageon: window.location.pathname,\r\n            referrer: document.referrer,\r\n            browserName: navigator.appName,\r\n            browserEngine: navigator.product,\r\n            browserVersion1a: navigator.appVersion,\r\n            browserVersion1b: navigator.userAgent,\r\n            browserLanguage: navigator.language,\r\n            browserOnline: navigator.onLine,\r\n            browserPlatform: navigator.platform,\r\n            javaEnabled: navigator.javaEnabled(),\r\n            dataCookiesEnabled: navigator.cookieEnabled,\r\n        };\r\n    }\r\n\r\n    getNow() {\r\n        return new Date();\r\n    }\r\n\r\n    backClickHandler() {\r\n        const { counter } = this.state;\r\n\r\n        if (counter > 0) this.setState({ counter: counter - 1 });\r\n    }\r\n\r\n    render() {\r\n        const { test, counter, hasMore } = this.state;\r\n        var render = <Loader />;\r\n\r\n        if (test && hasMore) {\r\n            const progress = (counter / test.questions.length) * 100;\r\n\r\n            render = (\r\n                <Fragment>\r\n                    <QuestionCard\r\n                        number={counter + 1}\r\n                        answer={answers[counter]}\r\n                        question={test.questions[counter]}\r\n                        onAnswer={this.handleAnswerClick}\r\n                        onBack={this.backClickHandler}\r\n                        progress={progress}\r\n                    />\r\n                </Fragment>\r\n            );\r\n        }\r\n\r\n        return render;\r\n    }\r\n}\r\n\r\nexport default TestContainer;\r\n","import './QuestionCard.css';\r\n\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\n\r\nconst useStyles = makeStyles({\r\n    cardBody: {\r\n        margin: 15,\r\n    },\r\n    header: {\r\n        padding: 0,\r\n    },\r\n    button: {\r\n        margin: 5,\r\n        width: 300,\r\n    },\r\n    none: {\r\n        display: 'none',\r\n    },\r\n    text: {\r\n        margin: 5,\r\n        textTransform: 'none',\r\n    },\r\n    buttonsRoot: {\r\n        marginTop: 15,\r\n        padding: 0,\r\n        justifyContent: 'center',\r\n    },\r\n    mainText: {\r\n        hyphens: 'none',\r\n    },\r\n});\r\n\r\nconst QuestionCard = ({ number, question, answer, progress, onAnswer, onBack }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className=\"card-container\">\r\n            <Card elevation={4}>\r\n                <div className={classes.cardBody}>\r\n                    <CardContent className={classes.header}>\r\n                        <div className=\"row mt-4\">\r\n                            <div className=\"col-2 title-btn-container\">\r\n                                <IconButton\r\n                                    onClick={onBack}\r\n                                    size=\"small\"\r\n                                    color=\"primary\"\r\n                                    disabled={!(progress > 0)}\r\n                                    aria-label=\"back\"\r\n                                >\r\n                                    <ArrowBackIosIcon />\r\n                                </IconButton>\r\n                            </div>\r\n                            <div className=\"col-8\">\r\n                                <Typography variant=\"h5\" component=\"h2\">\r\n                                    Вопрос №{number}\r\n                                </Typography>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"text-container mb-4 mt-4\">\r\n                            <Typography className=\"mainText\" variant=\"h6\" color=\"textSecondary\" component=\"p\">\r\n                                {question.text}\r\n                            </Typography>\r\n                        </div>\r\n                    </CardContent>\r\n\r\n                    <CardActions className={classes.buttonsRoot}>\r\n                        <div className=\"buttons-container\">\r\n                            {question.answers.map((item, index) => (\r\n                                <Button\r\n                                    key={index}\r\n                                    size=\"large\"\r\n                                    variant=\"outlined\"\r\n                                    color={answer && answer.answerId === item.id ? 'primary' : 'default'}\r\n                                    className={classes.button}\r\n                                    onClick={() => onAnswer(question.id, item.id)}\r\n                                >\r\n                                    <Typography\r\n                                        className={classes.text}\r\n                                        color={answer && answer.answerId === item.id ? 'primary' : 'textSecondary'}\r\n                                        variant=\"body1\"\r\n                                        component=\"p\"\r\n                                    >\r\n                                        {item.text}\r\n                                    </Typography>\r\n                                </Button>\r\n                            ))}\r\n                        </div>\r\n                    </CardActions>\r\n                </div>\r\n\r\n                <LinearProgress variant=\"determinate\" value={progress} />\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionCard;\r\n","import axios from 'axios';\r\n\r\nconst BASE_URL = 'https://cattell-test.somee.com/';\r\n\r\nconst api = axios.create({\r\n    baseURL: BASE_URL,\r\n});\r\n\r\nclass Api {\r\n    static async get(url, config) {\r\n        return api.get(url, config);\r\n    }\r\n\r\n    static async put(url, data, config) {\r\n        return api.put(url, data, config);\r\n    }\r\n\r\n    static async post(url, data, config) {\r\n        return api.post(url, data, config);\r\n    }\r\n\r\n    static async delete(url, config) {\r\n        return api.delete(url, config);\r\n    }\r\n}\r\n\r\nexport default Api;\r\n","const GET_TEST = '/api/test';\r\nconst GET_RESULT = '/api/result/';\r\nconst POST_ANSWER = '/api/result';\r\n\r\nexport { GET_TEST, POST_ANSWER, GET_RESULT };\r\n","import React from 'react';\r\n\r\nimport { Typography, Paper } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '90%',\r\n        maxWidth: 450,\r\n        padding: 25,\r\n    },\r\n    text: {\r\n        marginBottom: 15,\r\n    },\r\n});\r\n\r\nconst TestRunnerCard = ({ history }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Paper elevation={4} className={classes.root}>\r\n            <Typography className={classes.text} variant=\"h5\" component=\"h2\">\r\n                Тест содержит 109 вопросов и займет от 20 до 30 минут времени.\r\n            </Typography>\r\n\r\n            <Button variant=\"contained\" size=\"large\" color=\"primary\" onClick={() => history.push('/test')}>\r\n                Начать\r\n            </Button>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default TestRunnerCard;\r\n","import React from 'react';\r\n\r\nimport { Api, GET_RESULT } from '../../utilities';\r\nimport { ResultCard, Loader } from '..';\r\n\r\nclass ResultCardContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { result: null };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadResult();\r\n    }\r\n\r\n    async loadResult() {\r\n        const { id } = this.props;\r\n        const { history } = this.props;\r\n\r\n        try {\r\n            const resp = await Api.get(GET_RESULT + id);\r\n\r\n            if (resp.status === 200) {\r\n                this.setState({ result: resp.data });\r\n            }\r\n        } catch (e) {\r\n            if (e.response && e.response.status === 404) {\r\n                history.push('/not-found');\r\n            } else {\r\n                history.push('/error');\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { result } = this.state;\r\n\r\n        return result ? <ResultCard result={result} /> : <Loader />;\r\n    }\r\n}\r\n\r\nexport default ResultCardContainer;\r\n","import './LinkContainer.css';\r\n\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { TextField } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n    link: {\r\n        marginTop: 5,\r\n        marginBottom: 5,\r\n    },\r\n});\r\n\r\nconst LinkContainer = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className=\"link-container\">\r\n            <TextField className={classes.link} label=\"url\" value={window.location.href} size=\"small\" />\r\n\r\n            <Button\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                onClick={() => navigator.clipboard.writeText(window.location.href)}\r\n            >\r\n                Копировать\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LinkContainer;\r\n","import './Factor.css';\r\n\r\nimport React from 'react';\r\n\r\nimport { Slider, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    slider: {\r\n        margin: 0,\r\n    },\r\n});\r\n\r\nfunction createMarks(config) {\r\n    var result = [];\r\n\r\n    if (config.expectedValue > 0) {\r\n        result = result.concat([\r\n            {\r\n                value: config.expectedValue,\r\n                label: 'с',\r\n            },\r\n            {\r\n                value: config.expectedValue - config.standardDeviation,\r\n                label: 'н',\r\n            },\r\n            {\r\n                value: config.expectedValue + config.standardDeviation,\r\n                label: 'в',\r\n            },\r\n        ]);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nconst Factor = ({ factor, configuration }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className=\"mt-4 mr-0 ml-0\">\r\n            <div className=\"row\">\r\n                <div className=\"col-2 factor-container p-0 m-0\">\r\n                    <Typography variant=\"h5\" component=\"h6\">\r\n                        {factor.name}\r\n                        <sup>-</sup>\r\n                    </Typography>\r\n                </div>\r\n                <div className=\"col-8 p-1\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-5 lfactor-title\">\r\n                            <Typography variant=\"caption\" component=\"p\" color=\"textSecondary\" align=\"left\">\r\n                                {configuration.minValueName}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className=\"col-2\">{factor.value}</div>\r\n                        <div className=\"col-5 rfactor-title\">\r\n                            <Typography variant=\"caption\" component=\"p\" color=\"textSecondary\" align=\"right\">\r\n                                {configuration.maxValueName}\r\n                            </Typography>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <Slider\r\n                            disabled\r\n                            className={classes.slider}\r\n                            value={factor.value}\r\n                            aria-labelledby=\"slider\"\r\n                            step={1}\r\n                            marks={createMarks(configuration)}\r\n                            min={configuration.minValue}\r\n                            max={configuration.maxValue}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-2 factor-container p-0 m-0\">\r\n                    <Typography variant=\"h5\" component=\"h6\">\r\n                        {factor.name}\r\n                        <sup>+</sup>\r\n                    </Typography>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Factor;\r\n","import './ResultCard.css';\r\n\r\nimport React from 'react';\r\n\r\nimport { Typography, Paper } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LinkContainer from '../linkContainer/LinkContainer';\r\nimport Factor from '../factor/Factor';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        padding: 25,\r\n    },\r\n    text: {\r\n        marginBottom: 15,\r\n    },\r\n    resultsTitle: {\r\n        marginTop: 15,\r\n        marginBottom: 65,\r\n    },\r\n});\r\n\r\nconst ResultCard = ({ result }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className=\"result-container mt-5 mb-5\">\r\n            <Paper elevation={4} className={classes.root}>\r\n                <div className={classes.resultsTitle}>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        Спасибо за прохождение теста Кеттелла!\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        Результаты:\r\n                    </Typography>\r\n                </div>\r\n                <div>\r\n                    {result.map((item, index) => (\r\n                        <Factor key={index} factor={item.factor} configuration={item.configuration} />\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"mt-3 mb-3\">\r\n                    <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\" align=\"left\">\r\n                        н,с,в - диапазон средних значений\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\" align=\"left\">\r\n                        н – низкое\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\" align=\"left\">\r\n                        с – среднее\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\" align=\"left\">\r\n                        в – высокое\r\n                    </Typography>\r\n                </div>\r\n                <LinkContainer className=\"mt-5\" />\r\n                <Typography variant=\"caption\" component=\"p\" color=\"textSecondary\" align=\"center\">\r\n                    Created by Sophia Yakimova\r\n                </Typography>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResultCard;\r\n","import './Loader.scss';\r\n\r\nimport React from 'react';\r\n\r\nimport Loader from 'react-loaders';\r\n\r\nconst QuestionCard = () => {\r\n    return <Loader color=\"#3f51b5\" type=\"ball-grid-pulse\" active />;\r\n};\r\n\r\nexport default QuestionCard;\r\n","import React from 'react';\r\nimport { TestContainer } from '../../components';\r\n\r\nconst Test = ({ history }) => {\r\n    return <TestContainer history={history} />;\r\n};\r\n\r\nexport default Test;\r\n","import React from 'react';\r\n\r\nimport { TestRunnerCard } from '../../components';\r\n\r\nconst TestRunner = ({ history }) => <TestRunnerCard history={history} />;\r\n\r\nexport default TestRunner;\r\n","import React from 'react';\r\n\r\nimport { useParams } from 'react-router-dom';\r\nimport { ResultCardContainer } from '../../components';\r\n\r\nconst Result = ({ history }) => {\r\n    const { id } = useParams();\r\n    \r\n    return <ResultCardContainer history={history} id={id} />;\r\n}\r\n\r\nexport default Result;\r\n","import React from 'react';\r\nimport './NotFound.css';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div className=\"notfound\">\r\n            <div className=\"notfound-404\">\r\n                <h1>404</h1>\r\n            </div>\r\n            <h2>упс! Ничего не найдено</h2>\r\n            <p>\r\n                Возможно, страница, которую вы ищете, была удалена, изменилось ее имя или временно недоступна.\r\n                <Link to=\"/\">Вернуться к тесту</Link>\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport './ServerError.css';\r\n\r\nconst ServerError = () => {\r\n    return (\r\n        <div className=\"serv-err\">\r\n            <div className=\"serv-err-404\">\r\n                <h1>упс!</h1>\r\n            </div>\r\n            <h2>Сервер недоступен</h2>\r\n            <p>\r\n                К сожелению сервер в данный момент не может обработать запрос в связи с временной перегрузкой или\r\n                другими обстоятельствами. Зайдите позже или обратитесь к администратору.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ServerError;\r\n","import './Navigator.css';\r\n\r\nimport React from 'react';\r\nimport { Route, Switch, HashRouter } from 'react-router-dom';\r\n\r\nimport { Test, TestRunner, Result, NotFound, ServerError } from './containers';\r\n\r\nconst Navigator = () => (\r\n    <HashRouter>\r\n        <div className=\"main-container\">\r\n            <Switch>\r\n                <Route path='/' exact component={TestRunner} />\r\n                <Route path=\"/test\" component={Test} />\r\n                <Route path=\"/result/:id\" component={Result} />\r\n                <Route path=\"/error\" component={ServerError} />\r\n                <Route path=\"*\" component={NotFound} />\r\n            </Switch>\r\n        </div>\r\n    </HashRouter>\r\n);\r\n\r\nexport default Navigator;\r\n","import React from 'react';\nimport Navigator from './Navigator';\n\nfunction App() {\n    return <Navigator />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}